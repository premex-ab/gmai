/*
 * This source file was generated by the Gradle 'init' task
 */
package se.premex.gmai.plugin

import java.io.File
import kotlin.test.assertTrue
import kotlin.test.Test
import org.gradle.testkit.runner.GradleRunner
import org.junit.jupiter.api.io.TempDir

/**
 * A simple functional test for the 'se.premex.gmai' plugin.
 */
class GradleManagedAiPluginFunctionalTest {

    @field:TempDir
    lateinit var projectDir: File

    private val buildFile by lazy { projectDir.resolve("build.gradle") }
    private val settingsFile by lazy { projectDir.resolve("settings.gradle") }

    @Test fun `can run task`() {
        // Set up the test build
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id('se.premex.gmai')
            }
            
            managedAi {
                autoInstall = false
                autoStart = false
            }
        """.trimIndent())

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("ollamaStatus")
        runner.withProjectDir(projectDir)
        val result = runner.build()

        // Verify the result
        assertTrue(result.output.contains("Ollama Status:"))
    }

    @Test fun `can run status task`() {
        // Set up the test build
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id('se.premex.gmai')
            }
            
            managedAi {
                autoInstall = false
                autoStart = false
            }
        """.trimIndent())

        // Run the build
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("managedAiStatus")
        runner.withProjectDir(projectDir)
        val result = runner.build()

        // Verify the result
        assertTrue(result.output.contains("Ollama Status:"))
    }

    @Test fun `tasks can depend on setupManagedAi and teardownManagedAi`() {
        // Set up the test build
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id('se.premex.gmai')
            }
            
            managedAi {
                autoInstall = false
                autoStart = false
            }
            
            tasks.register('testTask') {
                dependsOn 'setupManagedAi'
                finalizedBy 'teardownManagedAi'
                doLast {
                    println("Test task executed")
                }
            }
        """.trimIndent())

        // Run the build with dry run to see task dependencies
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("testTask", "--dry-run")
        runner.withProjectDir(projectDir)
        val result = runner.build()

        // Verify the task dependencies are configured correctly
        assertTrue(result.output.contains(":setupManagedAi"))
        assertTrue(result.output.contains(":testTask"))
        assertTrue(result.output.contains(":teardownManagedAi"))
    }

    @Test fun `tasks can depend on setupManagedAi without teardown`() {
        // Set up the test build
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id('se.premex.gmai')
            }
            
            managedAi {
                autoInstall = false
                autoStart = false
            }
            
            tasks.register('testTask') {
                dependsOn 'setupManagedAi'
                doLast {
                    println("Test task executed")
                }
            }
        """.trimIndent())

        // Run the build with dry run to see task dependencies
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("testTask", "--dry-run")
        runner.withProjectDir(projectDir)
        val result = runner.build()

        // Verify setup dependency exists but teardown finalizer does not
        assertTrue(result.output.contains(":setupManagedAi"))
        assertTrue(result.output.contains(":testTask"))
        // teardownManagedAi should not be in the execution plan
        assertTrue(!result.output.contains(":teardownManagedAi"))
    }

    @Test fun `setupManagedAi and teardownManagedAi tasks are available`() {
        // Set up the test build
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id('se.premex.gmai')
            }
            
            managedAi {
                autoInstall = false
                autoStart = false
            }
        """.trimIndent())

        // Run the build to list available tasks
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("tasks", "--all")
        runner.withProjectDir(projectDir)
        val result = runner.build()

        // Verify the managed AI tasks are available
        assertTrue(result.output.contains("setupManagedAi"))
        assertTrue(result.output.contains("teardownManagedAi"))
    }

    @Test fun `multiple tasks can depend on managed AI tasks`() {
        // Set up the test build
        settingsFile.writeText("")
        buildFile.writeText("""
            plugins {
                id('se.premex.gmai')
            }
            
            managedAi {
                autoInstall = false
                autoStart = false
            }
            
            tasks.register('task1') {
                dependsOn 'setupManagedAi'
                finalizedBy 'teardownManagedAi'
                doLast {
                    println("Task 1 executed")
                }
            }
            
            tasks.register('task2') {
                dependsOn 'setupManagedAi'
                doLast {
                    println("Task 2 executed")
                }
            }
        """.trimIndent())

        // Run the build with dry run to see task dependencies
        val runner = GradleRunner.create()
        runner.forwardOutput()
        runner.withPluginClasspath()
        runner.withArguments("task1", "task2", "--dry-run")
        runner.withProjectDir(projectDir)
        val result = runner.build()

        // Verify both tasks have setup dependency
        assertTrue(result.output.contains(":setupManagedAi"))
        assertTrue(result.output.contains(":task1"))
        assertTrue(result.output.contains(":task2"))
        // Only task1 should have teardown finalizer
        assertTrue(result.output.contains(":teardownManagedAi"))
    }
}
