/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.14.3/userguide/custom_plugins.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Add serialization plugin for JSON handling
    alias(libs.plugins.kotlin.serialization)

    id("com.gradle.plugin-publish") version "1.3.1"
}

group = "se.premex"
version = "0.0.1"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Core dependencies
    implementation(libs.ktor.client.core)
    implementation(libs.ktor.client.cio)
    implementation(libs.ktor.client.content.negotiation)
    implementation(libs.ktor.serialization.kotlinx.json)
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.kotlinx.coroutines.core)
    implementation(libs.slf4j.api)

    // Test dependencies
    testImplementation(libs.ktor.client.mock)
    testImplementation(libs.kotlinx.coroutines.test)
    testImplementation(libs.kotest.runner.junit5)
    testImplementation(libs.mockk)
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("2.1.20")
        }

        // Create a new test suite
        val functionalTest by registering(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("2.1.20")

            dependencies {
                // functionalTest test suite depends on the production code in tests
                implementation(project())
                // Add coroutines dependency for integration tests
                implementation(libs.kotlinx.coroutines.core)
            }

            targets {
                all {
                    // This test suite should run after the built-in test suite has run its tests
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

gradlePlugin {
    website = "https://github.com/premex-ab/gmai"
    vcsUrl = "https://github.com/premex-ab/gmai"

    // Define the plugin
    val managedAi by plugins.creating {
        id = "se.premex.gmai"
        implementationClass = "se.premex.gmai.plugin.GradleManagedAiPlugin"
        displayName = "Gradle Managed AI"
        description = "Manage local Ollama LLM instances in Gradle builds"
        tags = listOf("ai", "ollama", "llm", "machine-learning")
    }
}

gradlePlugin.testSourceSets.add(sourceSets["functionalTest"])

tasks.named<Task>("check") {
    // Include functionalTest as part of the check lifecycle
    dependsOn(testing.suites.named("functionalTest"))
}
